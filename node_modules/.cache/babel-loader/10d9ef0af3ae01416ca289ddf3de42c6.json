{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Tech.me\\\\Downloads\\\\react1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\Users\\\\Tech.me\\\\Downloads\\\\react1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\Tech.me\\\\Downloads\\\\react1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Tech.me\\\\Downloads\\\\react1\\\\src\\\\App1.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nvar gridSize = 6;\nfunction App() {\n  var _this = this;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    tiles = _useState2[0],\n    setTiles = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedTiles = _useState4[0],\n    setSelectedTiles = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    matchedPairs = _useState6[0],\n    setMatchedPairs = _useState6[1];\n  useEffect(function () {\n    var numbers = Array.from({\n      length: gridSize * gridSize / 2\n    }, function (_, index) {\n      return index + 1;\n    });\n    var shuffledNumbers = [].concat(numbers, numbers).sort(function () {\n      return Math.random() - 0.5;\n    });\n    setTiles(shuffledNumbers.map(function (number, index) {\n      return {\n        id: index,\n        number: number,\n        flipped: false,\n        matched: false\n      };\n    }));\n  }, []);\n  var handleTileClick = function handleTileClick(tile) {\n    if (selectedTiles.length < 2 && !selectedTiles.includes(tile) && !tile.flipped) {\n      var updatedTiles = tiles.map(function (t) {\n        return t.id === tile.id ? _objectSpread(_objectSpread({}, t), {}, {\n          flipped: true\n        }) : t;\n      });\n      setTiles(updatedTiles);\n      setSelectedTiles([].concat(_toConsumableArray(selectedTiles), [tile]));\n      if (selectedTiles.length === 1) {\n        setTimeout(checkMatch, 1000);\n      }\n    }\n  };\n  var checkMatch = function checkMatch() {\n    var _selectedTiles = _slicedToArray(selectedTiles, 2),\n      tile1 = _selectedTiles[0],\n      tile2 = _selectedTiles[1];\n    var updatedTiles = tiles.map(function (tile) {\n      return tile.id === tile1.id || tile.id === tile2.id ? _objectSpread(_objectSpread({}, tile), {}, {\n        matched: true\n      }) : tile;\n    });\n    if (tile1.number === tile2.number) {\n      setMatchedPairs(matchedPairs + 1);\n    } else {\n      updatedTiles.forEach(function (tile) {\n        return tile.flipped = false;\n      });\n    }\n    setSelectedTiles([]);\n    setTiles(updatedTiles);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game-grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, tiles.map(function (tile) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: tile.id,\n      className: \"tile \".concat(tile.flipped ? 'flipped' : '', \" \").concat(tile.matched ? 'matched' : ''),\n      onClick: function onClick() {\n        return handleTileClick(tile);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }, tile.flipped && !tile.matched ? tile.number : '');\n  })), matchedPairs === gridSize * gridSize / 2 && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 52\n    }\n  }, \"Congratulations! You won!\"));\n}\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","gridSize","App","_this","_useState","_useState2","_slicedToArray","tiles","setTiles","_useState3","_useState4","selectedTiles","setSelectedTiles","_useState5","_useState6","matchedPairs","setMatchedPairs","numbers","Array","from","length","_","index","shuffledNumbers","concat","sort","Math","random","map","number","id","flipped","matched","handleTileClick","tile","includes","updatedTiles","t","_objectSpread","_toConsumableArray","setTimeout","checkMatch","_selectedTiles","tile1","tile2","forEach","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","key","onClick"],"sources":["C:/Users/Tech.me/Downloads/react1/src/App1.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\n\r\nconst gridSize = 6;\r\n\r\nfunction App() {\r\n  const [tiles, setTiles] = useState([]);\r\n  const [selectedTiles, setSelectedTiles] = useState([]);\r\n  const [matchedPairs, setMatchedPairs] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const numbers = Array.from({ length: gridSize * gridSize / 2 }, (_, index) => index + 1);\r\n    const shuffledNumbers = [...numbers, ...numbers].sort(() => Math.random() - 0.5);\r\n    setTiles(shuffledNumbers.map((number, index) => ({ id: index, number, flipped: false, matched: false })));\r\n  }, []);\r\n\r\n  const handleTileClick = (tile) => {\r\n    if (selectedTiles.length < 2 && !selectedTiles.includes(tile) && !tile.flipped) {\r\n      const updatedTiles = tiles.map((t) => (t.id === tile.id ? { ...t, flipped: true } : t));\r\n      setTiles(updatedTiles);\r\n      setSelectedTiles([...selectedTiles, tile]);\r\n\r\n      if (selectedTiles.length === 1) {\r\n        setTimeout(checkMatch, 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkMatch = () => {\r\n    const [tile1, tile2] = selectedTiles;\r\n    const updatedTiles = tiles.map((tile) =>\r\n      tile.id === tile1.id || tile.id === tile2.id ? { ...tile, matched: true } : tile\r\n    );\r\n\r\n    if (tile1.number === tile2.number) {\r\n      setMatchedPairs(matchedPairs + 1);\r\n    } else {\r\n      updatedTiles.forEach((tile) => (tile.flipped = false));\r\n    }\r\n\r\n    setSelectedTiles([]);\r\n    setTiles(updatedTiles);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"game-grid\">\r\n        {tiles.map((tile) => (\r\n          <div\r\n            key={tile.id}\r\n            className={`tile ${tile.flipped ? 'flipped' : ''} ${tile.matched ? 'matched' : ''}`}\r\n            onClick={() => handleTileClick(tile)}\r\n          >\r\n            {tile.flipped && !tile.matched ? tile.number : ''}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {matchedPairs === gridSize * gridSize / 2 && <div className=\"message\">Congratulations! You won!</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}